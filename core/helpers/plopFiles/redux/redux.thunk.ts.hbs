import { createAsyncThunk } from "@reduxjs/toolkit";
import { set{{pascalCase name}}, startLoading, successLoading, failLoading } from "./{{camelCase name}}.slice";
import { RootState } from "..";
import { shouldFetch } from "../redux.helper";

const reduxKey = "{{camelCase name}}";

interface Fetch{{pascalCase name}}Params {
  page?: number;
  limit?: number;
  forceFetch?: boolean;
  callback?: Function | boolean | null;
}

export const fetch{{pascalCase name}} = createAsyncThunk(
  `${reduxKey}/fetch{{pascalCase name}}`,
  async (params: Fetch{{pascalCase name}}Params, thunkApi) => {
    const {
      page = 1,
      limit = 10,
      forceFetch = false,
      callback = false,
    } = params ?? {};

    const { dispatch, getState, requestId } = thunkApi ?? {};
    const id = requestId;

    const resourceParams = {
      id,
      state: getState() as RootState,
      dispatch,
      reduxKey,
      forceFetch,
    };

    if (shouldFetch(resourceParams)) {
      try {
        dispatch(startLoading({ id }));

        // TODO: Replace with actual API call
        const response = await Promise.resolve({ data: [], id });

        dispatch(set{{pascalCase name}}({ data: response.data, id }));
        dispatch(successLoading({ id }));

        typeof callback == "function" && callback(true, response.data);
        
        return response.data;
      } catch (error) {
        dispatch(failLoading({ id }));

        typeof callback == "function" &&
          callback(false, error || "Failed to fetch {{pascalCase name}}");

        throw error;
      }
    }

   
  }
);

export default {
  fetch{{pascalCase name}},
};

